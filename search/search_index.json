{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About ecs-utdevents is a site originally created by a group of senior CS students as their Senior Design project. It is an attempt at consolidating the various and expansive number of events that ECS organizations regularly put on for the community. As officers for multiple organizations we realized that it had become quite difficult to not overlap with some other event. As students we became oversaturated with information about so many events and couldn't keep up. ecs-utdevents aims to fix both of those needs.","title":"About"},{"location":"#about","text":"ecs-utdevents is a site originally created by a group of senior CS students as their Senior Design project. It is an attempt at consolidating the various and expansive number of events that ECS organizations regularly put on for the community. As officers for multiple organizations we realized that it had become quite difficult to not overlap with some other event. As students we became oversaturated with information about so many events and couldn't keep up. ecs-utdevents aims to fix both of those needs.","title":"About"},{"location":"admin/","text":"Administrative This documentation is meant to be used by the maintainers of the ecs-utdevents, i.e. the people who have access to the utdecsevents@gmail.com account. Adding an organization Navigate to Firebase console. Go to the ecs-utdevents project. Using the left-hand sidebar, navigate to Authentication . Select Add user . You\u2019ll be prompted to enter a Email and Password for the user. Use the Organization Email for the Email and a randomly generated string for the password. Note We will not give nor store this string anywhere and the org will be directed to reset the password before being able to login. We used lastpass password generator and 99-length strings for security reasons. If an org gave the wrong email, simply delete the organization and create a new one. After creating the user, copy the respective User UID from the Users table. Navigate to Firestore Database using the left-hand sidebar. Here we are going to add a document to the organizations collection Choose organizations in the leftmost column Select Add document For Document ID paste the User UID you copied from the Authentication section. For fields add the following. Note that capitalization and spelling are very important and all fields MUST be added! Name * [string] ShortName * [string] Website * [string] Description * [string] UId ** [string] Slug *** [string] ImageUrl [string] SocialMedia [map] discord [string] facebook [string] groupme [string] instagram [string] linkedIn [string] snapchat [string] *These fields are required and should be filled in with info from the Org Sign up form. ** UId this is the User UID copied from Authentication, we store it both in the document and as the document ID. *** Slug is a required field that we don\u2019t get from the Org Sign up form. The default slug should just be the name of the organization in all lower case with dashes instead of space (i.e. \u201cWomen Who Compute\u201d => \u201cwomen-who-compute\u201d ) Note The ImageUrl and all the SocialMedia subfields are left empty since organizations are not required to submit them at time of application. However, it is still important to create these fields for organizations to be able to add them on their profile page! You\u2019re all done creating a new Org User for the website! Now you can email the organization point of contact and the organization itself with instructions on how to get started! There\u2019s a template inside the ecsutdevents gmail account that we use for Organization Approvals. Adding Docs We use MkDocs . Deploying If you are familiar with Markdown you don't really even need to set up everything below. That's only necessary for local building and testing in case you are adding some new pages/fancy things that you aren't sure will work. Otherwise you can always just edit the files directly on GitHub. To re-deploy the documents to the GitHub Pages websites, go to the Actions Tab in this repository, select Publish docs via GitHub Pages , click on Run Workflow , select the main branch, and now click on the green Run Workflow button. This will start an automated GitHub Action which will build the main branch and deploy it to our GitHabe Pages website! Getting Started To contribute to and run these docs locally you'll need to download a couple of dependencies. Requirements You'll need Python 3.5+ installed. If you don't have this already then you can downlaod it here . You'll also need pip, a package manager for Python. If you downloaded Python from python.org then you will likely already have it pre-installed. If not you can download it separately here . To build and test the documents you'll need the following python dependencies: - mkdocs (1.1.2) - pymdown-extensions (8.1.1) Fortunately we've included these dependencies in a requirements.txt . So all you have to do is run the following command: pip install -r requirements.txt Testing You can test the docs by navigating into the folder and running the following command: mkdocs serve This will start a local build at http://127.0.0.1:8000/ . You can find out more detail about local test on MkDocs website . Front-End Testing You can test locally and with Firebase Hosting. You should always be testing changes locally by running yarn start . However, in many cases you may also want to test your changes on a deployed test site before pushing it to our production site. This is made possible with the use of our development database! We've set up a separate dev environment for us to make changes and test them without affecting our live production site. You're already connected to the development database when you set up your front-end development environment above. To push to our dev site ( https://ecs-utdevents-dev.web.app/ ). Follow the instructions below: Navigate to your local front-end folder Open up your local firebase.json file and change the site field to ecs-utdevents-dev . Make sure you have Firebase CLI tools downloaded on your computer. Run firebase login and login to utdecsevents@gmail.com Run yarn build Run firebase deploy -P dev Caution Do NOT commit your changes to firebase.json to Git. Pushing this change will cause our automatic deployment workflow to fail. Deployment We have set up an automatic GitHub Action that deploys the main branch to our live site whenever someone pushes to main. There are however a limited number of GitHub Action deployments available to a free organization (600 minutes/month) so to restrict crossing this limit and to restrict constant changes to UI/UX on the live site for users we mainly push changes to the dev branch. When we feel there are significant and well-tested changes on the dev branch we merge dev -> main , triggering the GitHub Action as well. Note that this GitHub Action also allows us to securely push our code to Firebase Hosting without exposing the necessary configuration variables for Firebase Authentication. These are important to remain hidden for our production site so that some other developer cannot reuse our configuration and potentially use their own app to login to our user database. The majority of the configuration variables are stored in GitHub Secrets and are loaded into the environment variables when building. The main reason we use a GitHub Action is to hide these environment variables. When using the firebase deploy method shown in the Testing section above we create a local build (using yarn build ) that stores all of the environemnt variables unecrypted and which can be accessed by a malicious actor.","title":"Administrative"},{"location":"admin/#administrative","text":"This documentation is meant to be used by the maintainers of the ecs-utdevents, i.e. the people who have access to the utdecsevents@gmail.com account.","title":"Administrative"},{"location":"admin/#adding-an-organization","text":"Navigate to Firebase console. Go to the ecs-utdevents project. Using the left-hand sidebar, navigate to Authentication . Select Add user . You\u2019ll be prompted to enter a Email and Password for the user. Use the Organization Email for the Email and a randomly generated string for the password. Note We will not give nor store this string anywhere and the org will be directed to reset the password before being able to login. We used lastpass password generator and 99-length strings for security reasons. If an org gave the wrong email, simply delete the organization and create a new one. After creating the user, copy the respective User UID from the Users table. Navigate to Firestore Database using the left-hand sidebar. Here we are going to add a document to the organizations collection Choose organizations in the leftmost column Select Add document For Document ID paste the User UID you copied from the Authentication section. For fields add the following. Note that capitalization and spelling are very important and all fields MUST be added! Name * [string] ShortName * [string] Website * [string] Description * [string] UId ** [string] Slug *** [string] ImageUrl [string] SocialMedia [map] discord [string] facebook [string] groupme [string] instagram [string] linkedIn [string] snapchat [string] *These fields are required and should be filled in with info from the Org Sign up form. ** UId this is the User UID copied from Authentication, we store it both in the document and as the document ID. *** Slug is a required field that we don\u2019t get from the Org Sign up form. The default slug should just be the name of the organization in all lower case with dashes instead of space (i.e. \u201cWomen Who Compute\u201d => \u201cwomen-who-compute\u201d ) Note The ImageUrl and all the SocialMedia subfields are left empty since organizations are not required to submit them at time of application. However, it is still important to create these fields for organizations to be able to add them on their profile page! You\u2019re all done creating a new Org User for the website! Now you can email the organization point of contact and the organization itself with instructions on how to get started! There\u2019s a template inside the ecsutdevents gmail account that we use for Organization Approvals.","title":"Adding an organization"},{"location":"admin/#adding-docs","text":"We use MkDocs .","title":"Adding Docs"},{"location":"admin/#deploying","text":"If you are familiar with Markdown you don't really even need to set up everything below. That's only necessary for local building and testing in case you are adding some new pages/fancy things that you aren't sure will work. Otherwise you can always just edit the files directly on GitHub. To re-deploy the documents to the GitHub Pages websites, go to the Actions Tab in this repository, select Publish docs via GitHub Pages , click on Run Workflow , select the main branch, and now click on the green Run Workflow button. This will start an automated GitHub Action which will build the main branch and deploy it to our GitHabe Pages website!","title":"Deploying"},{"location":"admin/#getting-started","text":"To contribute to and run these docs locally you'll need to download a couple of dependencies.","title":"Getting Started"},{"location":"admin/#requirements","text":"You'll need Python 3.5+ installed. If you don't have this already then you can downlaod it here . You'll also need pip, a package manager for Python. If you downloaded Python from python.org then you will likely already have it pre-installed. If not you can download it separately here . To build and test the documents you'll need the following python dependencies: - mkdocs (1.1.2) - pymdown-extensions (8.1.1) Fortunately we've included these dependencies in a requirements.txt . So all you have to do is run the following command: pip install -r requirements.txt","title":"Requirements"},{"location":"admin/#testing","text":"You can test the docs by navigating into the folder and running the following command: mkdocs serve This will start a local build at http://127.0.0.1:8000/ . You can find out more detail about local test on MkDocs website .","title":"Testing"},{"location":"admin/#front-end","text":"","title":"Front-End"},{"location":"admin/#testing_1","text":"You can test locally and with Firebase Hosting. You should always be testing changes locally by running yarn start . However, in many cases you may also want to test your changes on a deployed test site before pushing it to our production site. This is made possible with the use of our development database! We've set up a separate dev environment for us to make changes and test them without affecting our live production site. You're already connected to the development database when you set up your front-end development environment above. To push to our dev site ( https://ecs-utdevents-dev.web.app/ ). Follow the instructions below: Navigate to your local front-end folder Open up your local firebase.json file and change the site field to ecs-utdevents-dev . Make sure you have Firebase CLI tools downloaded on your computer. Run firebase login and login to utdecsevents@gmail.com Run yarn build Run firebase deploy -P dev Caution Do NOT commit your changes to firebase.json to Git. Pushing this change will cause our automatic deployment workflow to fail.","title":"Testing"},{"location":"admin/#deployment","text":"We have set up an automatic GitHub Action that deploys the main branch to our live site whenever someone pushes to main. There are however a limited number of GitHub Action deployments available to a free organization (600 minutes/month) so to restrict crossing this limit and to restrict constant changes to UI/UX on the live site for users we mainly push changes to the dev branch. When we feel there are significant and well-tested changes on the dev branch we merge dev -> main , triggering the GitHub Action as well. Note that this GitHub Action also allows us to securely push our code to Firebase Hosting without exposing the necessary configuration variables for Firebase Authentication. These are important to remain hidden for our production site so that some other developer cannot reuse our configuration and potentially use their own app to login to our user database. The majority of the configuration variables are stored in GitHub Secrets and are loaded into the environment variables when building. The main reason we use a GitHub Action is to hide these environment variables. When using the firebase deploy method shown in the Testing section above we create a local build (using yarn build ) that stores all of the environemnt variables unecrypted and which can be accessed by a malicious actor.","title":"Deployment"},{"location":"api_documentation/","text":"API Documentation All API calls go through the base URL https://ecsutdevents.azurewebsites.net/ . For example, you can GET all events by visiting or using an HTTP GET request on https://ecsutdevents.azurewebsites.net/api/events/all . Note All times are stored server-side in UTC. Convert them to your local time zone. Note You must have proper cloud firestore authentication headers to perform POST, PUT, or DELETE requests. We do not currently have plans to allow organizations access to these headers, as it may introduce a security vulnerability. Events Data Model { \"id\": \"string\", \"title\": \"string\", \"location\": \"string\", \"link\": \"string\", \"startTime\": \"DateTime\", \"endTime\": \"DateTime\", \"description\": \"string\", \"orgs\": [ \"org_slug: string\", \"ACM\" ], \"tags\": [ \"name: string\", \"combinatorial-graph-algorithms\" ], \"lastUpdated\": \"DateTime\" } where DateTime is a string of the form \"yyyy-mm-ddThh:mm:ssZ\" (UTC time). Controller Command Method Route Description Create POST /api/events Create an event. Event must be specified as JSON in body of request ( id not required). id returned on successful POST Find all GET /api/events/all Retrieve all events in the database Find single GET /api/events/{event_id} Retrieves the event with id {event_id} Find all events by an org GET /api/events/org={org_slug} Retrieves events where at least one of the orgs matches {org_slug} Find events within date range GET /api/events/date/start={startTime}&end={endTime} Get all events within a specific date range, must provide both startTime and endTime in the following format: \"yyyy-mm-ddThh:mm:ssZ\" . You can supply \"none\" to ONE of the variables to fallback to a default that encapsulates all past or future events. Update PUT /api/events Update an event. All fields of the event must be specified as JSON in body of request (INCLUDING id) . id returned on successful PUT Delete DELETE /api/events/{event_id} Deletes the event with id {event_id} Organizations Data Model { \"uId\": \"string\", \"slug\": \"string\", \"name\": \"string\", \"shortName\": \"string\", \"website\": \"string\", \"description\": \"string\", \"imageUrl\": \"string\" \"socialMedia\": { \"key:string\": \"value:string\" \"facebook\": \"fb\", \"twitter\": \"tw\" } } Note uId is the id of the organization. This must be the same uId received after logging in. Controller Command Method Route Description Create POST /api/orgs Create an organization. Organization must be specified as JSON in body of request ( uId REQUIRED ). uId returned on successful POST Find all GET /api/orgs/all Retrieve all organizations in the database Find single by uid GET /api/orgs/{org_id} Retrieve the organization with id {org_id} Find single by slug GET /api/orgs/slug={org_slug} Retrieve the organization with slug {org_slug} Update PUT /api/orgs Update an organization. All fields of organization must be specified as JSON in body ( uId REQUIRED ). uId returned on successful PUT Delete DELETE /api/orgs/{org_uId} Deletes the organization with id {org_uId} Tags Data Model { \"id\": \"string\", \"name\": \"string\" } Controller Command Method Route Description Create POST /api/tags Create a tag. Tag must be specified as JSON in body of request (id not required). id returned on successful POST Find all GET /api/tags/all Retrieve all tags in the database Update PUT /api/tags Update a tag. Id and name of tag must be specified as JSON in body (Id REQUIRED ). id returned on successful PUT Delete DELETE /api/tags/{tag_id} Deletes the tag with id {tag_id} What is an API and how can I use it? An API is...","title":"API Documentation"},{"location":"api_documentation/#api-documentation","text":"All API calls go through the base URL https://ecsutdevents.azurewebsites.net/ . For example, you can GET all events by visiting or using an HTTP GET request on https://ecsutdevents.azurewebsites.net/api/events/all . Note All times are stored server-side in UTC. Convert them to your local time zone. Note You must have proper cloud firestore authentication headers to perform POST, PUT, or DELETE requests. We do not currently have plans to allow organizations access to these headers, as it may introduce a security vulnerability.","title":"API Documentation"},{"location":"api_documentation/#events","text":"","title":"Events"},{"location":"api_documentation/#data-model","text":"{ \"id\": \"string\", \"title\": \"string\", \"location\": \"string\", \"link\": \"string\", \"startTime\": \"DateTime\", \"endTime\": \"DateTime\", \"description\": \"string\", \"orgs\": [ \"org_slug: string\", \"ACM\" ], \"tags\": [ \"name: string\", \"combinatorial-graph-algorithms\" ], \"lastUpdated\": \"DateTime\" } where DateTime is a string of the form \"yyyy-mm-ddThh:mm:ssZ\" (UTC time).","title":"Data Model"},{"location":"api_documentation/#controller","text":"Command Method Route Description Create POST /api/events Create an event. Event must be specified as JSON in body of request ( id not required). id returned on successful POST Find all GET /api/events/all Retrieve all events in the database Find single GET /api/events/{event_id} Retrieves the event with id {event_id} Find all events by an org GET /api/events/org={org_slug} Retrieves events where at least one of the orgs matches {org_slug} Find events within date range GET /api/events/date/start={startTime}&end={endTime} Get all events within a specific date range, must provide both startTime and endTime in the following format: \"yyyy-mm-ddThh:mm:ssZ\" . You can supply \"none\" to ONE of the variables to fallback to a default that encapsulates all past or future events. Update PUT /api/events Update an event. All fields of the event must be specified as JSON in body of request (INCLUDING id) . id returned on successful PUT Delete DELETE /api/events/{event_id} Deletes the event with id {event_id}","title":"Controller"},{"location":"api_documentation/#organizations","text":"","title":"Organizations"},{"location":"api_documentation/#data-model_1","text":"{ \"uId\": \"string\", \"slug\": \"string\", \"name\": \"string\", \"shortName\": \"string\", \"website\": \"string\", \"description\": \"string\", \"imageUrl\": \"string\" \"socialMedia\": { \"key:string\": \"value:string\" \"facebook\": \"fb\", \"twitter\": \"tw\" } } Note uId is the id of the organization. This must be the same uId received after logging in.","title":"Data Model"},{"location":"api_documentation/#controller_1","text":"Command Method Route Description Create POST /api/orgs Create an organization. Organization must be specified as JSON in body of request ( uId REQUIRED ). uId returned on successful POST Find all GET /api/orgs/all Retrieve all organizations in the database Find single by uid GET /api/orgs/{org_id} Retrieve the organization with id {org_id} Find single by slug GET /api/orgs/slug={org_slug} Retrieve the organization with slug {org_slug} Update PUT /api/orgs Update an organization. All fields of organization must be specified as JSON in body ( uId REQUIRED ). uId returned on successful PUT Delete DELETE /api/orgs/{org_uId} Deletes the organization with id {org_uId}","title":"Controller"},{"location":"api_documentation/#tags","text":"","title":"Tags"},{"location":"api_documentation/#data-model_2","text":"{ \"id\": \"string\", \"name\": \"string\" }","title":"Data Model"},{"location":"api_documentation/#controller_2","text":"Command Method Route Description Create POST /api/tags Create a tag. Tag must be specified as JSON in body of request (id not required). id returned on successful POST Find all GET /api/tags/all Retrieve all tags in the database Update PUT /api/tags Update a tag. Id and name of tag must be specified as JSON in body (Id REQUIRED ). id returned on successful PUT Delete DELETE /api/tags/{tag_id} Deletes the tag with id {tag_id}","title":"Controller"},{"location":"api_documentation/#what-is-an-api-and-how-can-i-use-it","text":"An API is...","title":"What is an API and how can I use it?"},{"location":"backend/","text":"Back-End Deploying the Backend We use Azure for hosting the backend. The API calls from the front-end route through the base URL https://ecsutdevents.azurewebsites.net . If this URL changes, it will be updated in the overview tab in the following image. New Deployment from Visual Studio Here are instructions for creating a new backend deployment in Azure. First, select App Services from the Azure website . Next, click Add to create a new app service. Fill out the details. Note The Name parameter will change the URL of the API. Note For the Runtime Stack , we are currently using .Net Core 3.1 , but you can check in the .csproj file within visual studio: Click Review and Create . Click Create . Go to Build -> Publish UTD_ECS_Events_WebAPI on Visual Studio. Click New . Select Azure and click Next Select Azure App Service (Windows) and click Next . Select the App Service name that you created from step 3 and click Finish . Click Publish . You can check that it\u2019s successfully deployed by going to the url and using any api calls. i.e. https://testfordocumentation.azurewebsites.net/api/events/all should display the list of events. Note When deploying newly, to reduce the initial load time, see Keeping the App Server Awake . Publishing to the Existing App form Visual Studio Go to Build -> Publish UTD_ECS_Events_WebAPI on Visual Studio. Select the destination using the drop down. Note If you do not see the destination you want to publish to (if you haven\u2019t created it yet), follow the steps 7-10 of the section New Deployment from Visual Studio to add a new destination. Click Publish . You can check that it\u2019s successfully deployed by going to the url and using any api calls. i.e. https://testfordocumentation.azurewebsites.net/api/events/all should display the list of events. Notes on Azure App Services Limitations of using free service: Always on is set to False. See Keeping the App Server Awake . We can\u2019t use a custom domain name. This is why we\u2019re using Firebase hosting for front-end hosting. We don\u2019t have remote access to the machine. CPU is shared. Running backend locally and without Visual Studio If you just want to run the backend build (not front end) on your local computer, here are some instructions. Prerequisites First you'll want to ensure you have .NET Core downloaded. You will need at least version 3.1 or above. You can check your version by running: dotnet --version . Download .NET Core from here . Find the file to run Whenever the back-end team makes changes and runs their code in Visual Studio they are actually creating build files which we will use to run the code directly rather than recompiling it. You'll find the file we want to run in this repo at the following location: ecs-utd-events/backend_build/bin/Debug/netcoreapp3.1/UTD_ECS_Events_WebAPI.dll . Once you find this file you'll want to copy either a relative path or full path and simply run: dotnet <insert_filepath> to begin running the program. Check with Postman The application will be running at the following URL: http:localhost:80/ , and you can now send requests using Postman . You can currently (as of 02/18/21 @ 11:27:59 PM) send a GET, POST, or DELETE request to http:localhost:80/api/events . If you simply want to check the GET request you can also use any internet browser. Keeping the App Server Awake Website: https://uptimerobot.com/ . Uptime robot pings the server every 5 minutes to keep it awake. Login with utdecsevents@gmail.com google account. Backend Code Software Design The backend consists of three primary layers: - Repository : This layer is responsible for sorting, searching, and executing queries against the Cloud Firestore database. - Service : This layer is the middleware between the user-facing API and the database. It could be used to alter the type or model of data received from the database before it is sent to the user. For example, if the user wanted all events without their id, the service would ask the repository for all events, then modify them to remove all their ids, and then return it to the user. - Controller : This is where the API endpoints of the server are defined. It will parse and authenticate the API request sent to it, and on success, call the appropriate service method to retrieve the data required. Adding a GET API call Navigate to the appropriate repository file in Repositories . Create an async method that does the following: Executes a query against the database with the appropriate filters as required by the GET API call. Returns all the documents returned by the query. Navigate to the appropriate service file in Services . Create a method that calls the method you defined in the repository and makes it execute the task. Return the result of that task. Navigate to the appropriate controller file in Controllers . Create a new method in that file with the following: Appropriate parameters (for example, if the user wants to get all events by tag, then the tag should be a parameter) Specify the URL users will use to access this API endpoint above the method: [HttpGet(\"<URL_here>\")] Return type should be the appropriate type enclosed within ActionResult<my_type> The method should call the service method you defined and return the result. Authentication","title":"Back-End"},{"location":"backend/#back-end","text":"","title":"Back-End"},{"location":"backend/#deploying-the-backend","text":"We use Azure for hosting the backend. The API calls from the front-end route through the base URL https://ecsutdevents.azurewebsites.net . If this URL changes, it will be updated in the overview tab in the following image.","title":"Deploying the Backend"},{"location":"backend/#new-deployment-from-visual-studio","text":"Here are instructions for creating a new backend deployment in Azure. First, select App Services from the Azure website . Next, click Add to create a new app service. Fill out the details. Note The Name parameter will change the URL of the API. Note For the Runtime Stack , we are currently using .Net Core 3.1 , but you can check in the .csproj file within visual studio: Click Review and Create . Click Create . Go to Build -> Publish UTD_ECS_Events_WebAPI on Visual Studio. Click New . Select Azure and click Next Select Azure App Service (Windows) and click Next . Select the App Service name that you created from step 3 and click Finish . Click Publish . You can check that it\u2019s successfully deployed by going to the url and using any api calls. i.e. https://testfordocumentation.azurewebsites.net/api/events/all should display the list of events. Note When deploying newly, to reduce the initial load time, see Keeping the App Server Awake .","title":"New Deployment from Visual Studio"},{"location":"backend/#publishing-to-the-existing-app-form-visual-studio","text":"Go to Build -> Publish UTD_ECS_Events_WebAPI on Visual Studio. Select the destination using the drop down. Note If you do not see the destination you want to publish to (if you haven\u2019t created it yet), follow the steps 7-10 of the section New Deployment from Visual Studio to add a new destination. Click Publish . You can check that it\u2019s successfully deployed by going to the url and using any api calls. i.e. https://testfordocumentation.azurewebsites.net/api/events/all should display the list of events.","title":"Publishing to the Existing App form Visual Studio"},{"location":"backend/#notes-on-azure-app-services","text":"Limitations of using free service: Always on is set to False. See Keeping the App Server Awake . We can\u2019t use a custom domain name. This is why we\u2019re using Firebase hosting for front-end hosting. We don\u2019t have remote access to the machine. CPU is shared.","title":"Notes on Azure App Services"},{"location":"backend/#running-backend-locally-and-without-visual-studio","text":"If you just want to run the backend build (not front end) on your local computer, here are some instructions.","title":"Running backend locally and without Visual Studio"},{"location":"backend/#prerequisites","text":"First you'll want to ensure you have .NET Core downloaded. You will need at least version 3.1 or above. You can check your version by running: dotnet --version . Download .NET Core from here .","title":"Prerequisites"},{"location":"backend/#find-the-file-to-run","text":"Whenever the back-end team makes changes and runs their code in Visual Studio they are actually creating build files which we will use to run the code directly rather than recompiling it. You'll find the file we want to run in this repo at the following location: ecs-utd-events/backend_build/bin/Debug/netcoreapp3.1/UTD_ECS_Events_WebAPI.dll . Once you find this file you'll want to copy either a relative path or full path and simply run: dotnet <insert_filepath> to begin running the program.","title":"Find the file to run"},{"location":"backend/#check-with-postman","text":"The application will be running at the following URL: http:localhost:80/ , and you can now send requests using Postman . You can currently (as of 02/18/21 @ 11:27:59 PM) send a GET, POST, or DELETE request to http:localhost:80/api/events . If you simply want to check the GET request you can also use any internet browser.","title":"Check with Postman"},{"location":"backend/#keeping-the-app-server-awake","text":"Website: https://uptimerobot.com/ . Uptime robot pings the server every 5 minutes to keep it awake. Login with utdecsevents@gmail.com google account.","title":"Keeping the App Server Awake"},{"location":"backend/#backend-code","text":"","title":"Backend Code"},{"location":"backend/#software-design","text":"The backend consists of three primary layers: - Repository : This layer is responsible for sorting, searching, and executing queries against the Cloud Firestore database. - Service : This layer is the middleware between the user-facing API and the database. It could be used to alter the type or model of data received from the database before it is sent to the user. For example, if the user wanted all events without their id, the service would ask the repository for all events, then modify them to remove all their ids, and then return it to the user. - Controller : This is where the API endpoints of the server are defined. It will parse and authenticate the API request sent to it, and on success, call the appropriate service method to retrieve the data required.","title":"Software Design"},{"location":"backend/#adding-a-get-api-call","text":"Navigate to the appropriate repository file in Repositories . Create an async method that does the following: Executes a query against the database with the appropriate filters as required by the GET API call. Returns all the documents returned by the query. Navigate to the appropriate service file in Services . Create a method that calls the method you defined in the repository and makes it execute the task. Return the result of that task. Navigate to the appropriate controller file in Controllers . Create a new method in that file with the following: Appropriate parameters (for example, if the user wants to get all events by tag, then the tag should be a parameter) Specify the URL users will use to access this API endpoint above the method: [HttpGet(\"<URL_here>\")] Return type should be the appropriate type enclosed within ActionResult<my_type> The method should call the service method you defined and return the result.","title":"Adding a GET API call"},{"location":"backend/#authentication","text":"","title":"Authentication"},{"location":"faq/","text":"FAQ Here we'll answer some frequently asked questions about ecs-utdevents. If you can't find the answer to your question here or you'd like to report a bug with the website then email us at: utdecsevents@gmail.com Testing live change. As a user... Q: Whose events can I see? A: You are able to see all events that our partner organizations have added! This may be a lot of events so you can also filter through them by specific organization, tags, and start and end time. Q: Can I add events? A: No. Only partner organizations who have been approved by us can add events to the website. This is to ensure that you don't ever see inappropriate, spam, or fake events. Q: How can I save an event to my calendar? A: Once you select an event from the calendar it should either show up on the left hand side of the window or pop up from below. If you look at the bottom right corner of this event information you'll see a button with a calendar icon. Clicking on this button will download a .ics file with all the event information in it. You can then drag and drop this file into iCal and Outlook or you can import it into your Google Calendar. Unfortunately this feature does not currently work on mobile devices that don't support internet file downloads. Q: Can I save multiple events? A: Unfortunately this feature is not currently available. If you don't already see a feature you want, feel free to add it here . Q: Can I report a bug? A: Yes of course! We always appreciate feedback to help improve this project. Please create an issue on our github project and someone will try to look into it as soon as possible. Q: Can I contribute to this project? A: Yup! All of our code is open-sourced and we are always open to new pull requests. Take a look at the documentation for Developers for more info on how to get started. As an organization... Q: How do I sign up to use this platform? You can sign up here ! We'll then begin the process of verifying that you are an in fact a UTD student organization that is affiliated with ECS. If you haven't received a reply in over a week and believe that you should have been approved you can send us a reminder at utdecsevents@gmail.com . Q: Who can see my events and where? Anyone who knows about ecs-utdevents will be able to see your events. They can view them on the calendar on the home page or on your organization's profile page (these are found at /org/org-slug, i.e. /org/society-of-women-engineers). Q: Who can edit my event? All collaborators listed on an event are able to edit it. Q: Can I add an external collaborator to my event? Currently we do no support \"Other\" or external collaborators. If there is another ECS student organization working with you on an event then we recommend they also join our platform! Q: How can I use my data on the website for other purposes? You can access our Public API to retrieve all your event data! You could use this in any way you wish; you could create a discord bot that notifies your server about upcoming events or display your events directly on your organization's website or really anything! Check out our API documentation for more info. Q: Why doesn't my profile photo show up? When adding a new profile photo URL you may need to refresh the page to see updates. If you are instead seeing an empty box then this probably means that the URL you've given does not lead directly to the image. Make sure when you put the URL into your browser that you navigate to just the image not a webpage with the image on it. These image URLs should end in .jpg/.jpeg/.png or another image format. You can usually find an image URLs by right-clicking on an image and selecting \"Copy Image Address\"","title":"FAQ"},{"location":"faq/#faq","text":"Here we'll answer some frequently asked questions about ecs-utdevents. If you can't find the answer to your question here or you'd like to report a bug with the website then email us at: utdecsevents@gmail.com Testing live change.","title":"FAQ"},{"location":"faq/#as-a-user","text":"Q: Whose events can I see? A: You are able to see all events that our partner organizations have added! This may be a lot of events so you can also filter through them by specific organization, tags, and start and end time. Q: Can I add events? A: No. Only partner organizations who have been approved by us can add events to the website. This is to ensure that you don't ever see inappropriate, spam, or fake events. Q: How can I save an event to my calendar? A: Once you select an event from the calendar it should either show up on the left hand side of the window or pop up from below. If you look at the bottom right corner of this event information you'll see a button with a calendar icon. Clicking on this button will download a .ics file with all the event information in it. You can then drag and drop this file into iCal and Outlook or you can import it into your Google Calendar. Unfortunately this feature does not currently work on mobile devices that don't support internet file downloads. Q: Can I save multiple events? A: Unfortunately this feature is not currently available. If you don't already see a feature you want, feel free to add it here . Q: Can I report a bug? A: Yes of course! We always appreciate feedback to help improve this project. Please create an issue on our github project and someone will try to look into it as soon as possible. Q: Can I contribute to this project? A: Yup! All of our code is open-sourced and we are always open to new pull requests. Take a look at the documentation for Developers for more info on how to get started.","title":"As a user..."},{"location":"faq/#as-an-organization","text":"Q: How do I sign up to use this platform? You can sign up here ! We'll then begin the process of verifying that you are an in fact a UTD student organization that is affiliated with ECS. If you haven't received a reply in over a week and believe that you should have been approved you can send us a reminder at utdecsevents@gmail.com . Q: Who can see my events and where? Anyone who knows about ecs-utdevents will be able to see your events. They can view them on the calendar on the home page or on your organization's profile page (these are found at /org/org-slug, i.e. /org/society-of-women-engineers). Q: Who can edit my event? All collaborators listed on an event are able to edit it. Q: Can I add an external collaborator to my event? Currently we do no support \"Other\" or external collaborators. If there is another ECS student organization working with you on an event then we recommend they also join our platform! Q: How can I use my data on the website for other purposes? You can access our Public API to retrieve all your event data! You could use this in any way you wish; you could create a discord bot that notifies your server about upcoming events or display your events directly on your organization's website or really anything! Check out our API documentation for more info. Q: Why doesn't my profile photo show up? When adding a new profile photo URL you may need to refresh the page to see updates. If you are instead seeing an empty box then this probably means that the URL you've given does not lead directly to the image. Make sure when you put the URL into your browser that you navigate to just the image not a webpage with the image on it. These image URLs should end in .jpg/.jpeg/.png or another image format. You can usually find an image URLs by right-clicking on an image and selecting \"Copy Image Address\"","title":"As an organization..."},{"location":"frontend/","text":"Front-End Getting Started Prerequisites You'll need to have yarn installed on your computer. Follow directions here to get yarn set up. Unless you have access to the ecs-utd-events organizations (i.e. you are a maintainer) you will likely have to fork the repo to your personal GitHub account. Once you've forked the repository you can then clone the repo to your local machine, make changes, commit them, push them back to the forked repo and then submit a Pull Request to the main repo. If you are a maintainer then you can simply clone the original repository. You can do so by using the following command: git clone https://github.com/ecs-utd-events/ecs-utd-events.git . Once you have the repository on your local machine, navigate inside the ecs-utd-events and then into the front-end folder. Here you'll want to run: yarn install or simply yarn This will install all the dependencies in the React project. Environment Setup Inside the front-end folder you'll need to create a .env file to hold environment variables necessary to connect the front-end with the back-end server and Firebase Authentication. We have created a default .env file for developers testing on their local machine that connects to a staging/development database. This way any changes to the data/users does not effect our live site. Copy and paste the following into your .env file: REACT_APP_SERVER_URL=\"https://ecsutdevents-dev.azurewebsites.net\" REACT_APP_FIREBASE_CONFIG_APIKEY=\"AIzaSyC3l1wm0HeN54hct_VKVIaRYagvIqXfuKo\" REACT_APP_FIREBASE_CONFIG_AUTHDOMAIN=\"ecs-utdevents-dev.firebaseapp.com\", REACT_APP_FIREBASE_CONFIG_PROJECTID=\"ecs-utdevents-dev\", REACT_APP_FIREBASE_CONFIG_STORAGEBUCKET=\"ecs-utdevents-dev.appspot.com\", REACT_APP_FIREBASE_CONFIG_MESSAGINGSENDERID=\"486765773237\", REACT_APP_FIREBASE_CONFIG_APPID=\"1:486765773237:web:b07f6b68a760c19d9359fc\", REACT_APP_FIREBASE_CONFIG_MEASUREMENTID=\"G-E79XC8FBLG\" Run Locally Now you can start running the front-end code base locally! Simply run: yarn start from inside the front-end/ folder and you should be led to a local version of the website. React Context React Context is a relatively new feature that allows for certain data to be made available throughout all child components of the Context without having to pass it in as a property. This is especially useful when there may be many intermediate components that don't directly use the data but have children who do. There are two important instances where we use contexts: User Context and AllOrgContext . You can read more about React Context and its uses here . User Context User Context is used to manage the information of a logged in organization throughout the application. In UserProvider.jsx we create the UserContext and it's appropriate provider. Here we use Firebase's Authentication API to set our user and once we have received the user we fetch the corresponding organization data from our back-end Web API using the user's ID. We then create an object that stores both the Firebase Authentication data and the organization object and pass it into the UserContext.Provider as the value to be shared with all the children components. Now inside of any child component we can import UserContext , pass it into the useContext() React hook like so: useContext(UserContext) and get the org and user data. AllOrgContext Similarly, we realized that Firebase charges us by the number of queries we make to the database and wanted to reduce the number of times we called for all the organization data. Since the organization data does not change frequently and we need to use it frequently to convert orgIDs to shortNames or to full names we created a AllOrgContext within AllOrgProvider.jsx . Here we simply fetch all the organization data, store it in a state variable, and pass it in as the value for the AllOrgContext.Provider . Now we can access all the organization data anywhere in the application without having to refetch the data. In the future we may want to use Contexts to create a light vs. dark theme and to reduce other frequent fetch requests (such as tags or events). Firebase Authentication The Front-End directly connects to Firebase for Authentication. This is handled mainly in the following files: UserProvider.jsx : we explain this above in UserContext . AdminTab.js : here we must provide the function for an organization to logout. NavbarComponent.js : same as above. Login.js : here we handle submitting a given username and password to Firebase for login and then allowing the UserContext to propagate changes throughout the application. firebase.js : this file simply takes in all the environment variables necessary and establishes a connection with Firebase. This is then imported in all the above files to allow access to the Firebase Auth API .","title":"Front-End"},{"location":"frontend/#front-end","text":"","title":"Front-End"},{"location":"frontend/#getting-started","text":"","title":"Getting Started"},{"location":"frontend/#prerequisites","text":"You'll need to have yarn installed on your computer. Follow directions here to get yarn set up. Unless you have access to the ecs-utd-events organizations (i.e. you are a maintainer) you will likely have to fork the repo to your personal GitHub account. Once you've forked the repository you can then clone the repo to your local machine, make changes, commit them, push them back to the forked repo and then submit a Pull Request to the main repo. If you are a maintainer then you can simply clone the original repository. You can do so by using the following command: git clone https://github.com/ecs-utd-events/ecs-utd-events.git . Once you have the repository on your local machine, navigate inside the ecs-utd-events and then into the front-end folder. Here you'll want to run: yarn install or simply yarn This will install all the dependencies in the React project.","title":"Prerequisites"},{"location":"frontend/#environment-setup","text":"Inside the front-end folder you'll need to create a .env file to hold environment variables necessary to connect the front-end with the back-end server and Firebase Authentication. We have created a default .env file for developers testing on their local machine that connects to a staging/development database. This way any changes to the data/users does not effect our live site. Copy and paste the following into your .env file: REACT_APP_SERVER_URL=\"https://ecsutdevents-dev.azurewebsites.net\" REACT_APP_FIREBASE_CONFIG_APIKEY=\"AIzaSyC3l1wm0HeN54hct_VKVIaRYagvIqXfuKo\" REACT_APP_FIREBASE_CONFIG_AUTHDOMAIN=\"ecs-utdevents-dev.firebaseapp.com\", REACT_APP_FIREBASE_CONFIG_PROJECTID=\"ecs-utdevents-dev\", REACT_APP_FIREBASE_CONFIG_STORAGEBUCKET=\"ecs-utdevents-dev.appspot.com\", REACT_APP_FIREBASE_CONFIG_MESSAGINGSENDERID=\"486765773237\", REACT_APP_FIREBASE_CONFIG_APPID=\"1:486765773237:web:b07f6b68a760c19d9359fc\", REACT_APP_FIREBASE_CONFIG_MEASUREMENTID=\"G-E79XC8FBLG\"","title":"Environment Setup"},{"location":"frontend/#run-locally","text":"Now you can start running the front-end code base locally! Simply run: yarn start from inside the front-end/ folder and you should be led to a local version of the website.","title":"Run Locally"},{"location":"frontend/#react-context","text":"React Context is a relatively new feature that allows for certain data to be made available throughout all child components of the Context without having to pass it in as a property. This is especially useful when there may be many intermediate components that don't directly use the data but have children who do. There are two important instances where we use contexts: User Context and AllOrgContext . You can read more about React Context and its uses here .","title":"React Context"},{"location":"frontend/#user-context","text":"User Context is used to manage the information of a logged in organization throughout the application. In UserProvider.jsx we create the UserContext and it's appropriate provider. Here we use Firebase's Authentication API to set our user and once we have received the user we fetch the corresponding organization data from our back-end Web API using the user's ID. We then create an object that stores both the Firebase Authentication data and the organization object and pass it into the UserContext.Provider as the value to be shared with all the children components. Now inside of any child component we can import UserContext , pass it into the useContext() React hook like so: useContext(UserContext) and get the org and user data.","title":"User Context"},{"location":"frontend/#allorgcontext","text":"Similarly, we realized that Firebase charges us by the number of queries we make to the database and wanted to reduce the number of times we called for all the organization data. Since the organization data does not change frequently and we need to use it frequently to convert orgIDs to shortNames or to full names we created a AllOrgContext within AllOrgProvider.jsx . Here we simply fetch all the organization data, store it in a state variable, and pass it in as the value for the AllOrgContext.Provider . Now we can access all the organization data anywhere in the application without having to refetch the data. In the future we may want to use Contexts to create a light vs. dark theme and to reduce other frequent fetch requests (such as tags or events).","title":"AllOrgContext"},{"location":"frontend/#firebase-authentication","text":"The Front-End directly connects to Firebase for Authentication. This is handled mainly in the following files: UserProvider.jsx : we explain this above in UserContext . AdminTab.js : here we must provide the function for an organization to logout. NavbarComponent.js : same as above. Login.js : here we handle submitting a given username and password to Firebase for login and then allowing the UserContext to propagate changes throughout the application. firebase.js : this file simply takes in all the environment variables necessary and establishes a connection with Firebase. This is then imported in all the above files to allow access to the Firebase Auth API .","title":"Firebase Authentication"}]}